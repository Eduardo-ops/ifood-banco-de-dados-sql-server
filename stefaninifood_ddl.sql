USE stefaninifooddb;

-- **** TABELAS ****
CREATE TABLE TB_USUARIO(
	US_ID INT IDENTITY(1,1) NOT NULL,
	US_EMAIL VARCHAR(50) not null,
	US_SENHA VARCHAR(100) not null,

	CONSTRAINT PK_TB_USUARIO PRIMARY KEY CLUSTERED (US_ID)
)

CREATE TABLE TB_CLIENTE(
	CLI_ID INT IDENTITY(1,1) not null,
	CLI_NOME VARCHAR(40) not null,
	CLI_RG CHAR(9) not null,
	CLI_CPF CHAR(11) not null,
	CLI_IDADE SMALLINT null,
	CLI_ENDERECO VARCHAR(80) not null,

	CONSTRAINT PK_TB_CLIENTE PRIMARY KEY CLUSTERED (CLI_ID)
)

CREATE TABLE TB_ITEM_PEDIDO(
	IT_ID SMALLINT IDENTITY(1,1)not null,
	IT_QUANTIDADE SMALLINT not null,
	IT_PRECO SMALLMONEY not null,

	CONSTRAINT PK_TB_ITEM_PEDIDO PRIMARY KEY CLUSTERED (IT_ID)
)

CREATE TABLE TB_PEDIDO(
	PE_ID SMALLINT IDENTITY(1,1) not null,
	PE_ENDERECO VARCHAR(80) not null,
	PE_TAXA_ENTREGA SMALLMONEY null,
	PE_TIPO_PAGAMENTO VARCHAR(30) not null,
	PE_PRECO_TOTAL SMALLMONEY not null,
	PE_CONFIRMACAO_PEDIDO BIT not null,
	PE_STATUS_PEDIDO VARCHAR(14) not null,

	CONSTRAINT PK_TB_PEDIDO PRIMARY KEY CLUSTERED (PE_ID)
)

CREATE TABLE TB_LOJA(
	LO_ID SMALLINT IDENTITY(1,1) NOT NULL,
	LO_NOME VARCHAR(50) NOT NULL,
	LO_RAZAO_SOCIAL VARCHAR(50) NULL,
	LO_ENDERECO VARCHAR(80) NOT NULL,
	LO_CNPJ CHAR(14) NOT NULL,
	LO_DATA_REGISTRO DATE NOT NULL,

	CONSTRAINT PK_TB_LOJA PRIMARY KEY CLUSTERED (LO_ID)
)

CREATE TABLE TB_PRODUTO(
	PR_ID SMALLINT IDENTITY(1,1) NOT NULL,
	PR_NOME VARCHAR(50) NOT NULL,
	PR_DESCRICAO VARCHAR(80) NULL,
	PR_VALOR SMALLMONEY NOT NULL,

	CONSTRAINT PK_TB_PRODUTO PRIMARY KEY CLUSTERED (PR_ID)
)

CREATE TABLE TB_CATEGORIA(
	CA_ID SMALLINT IDENTITY(1,1) NOT NULL,
	CA_NOME VARCHAR(50) NOT NULL,

	CONSTRAINT PK_TB_CATEGORIA PRIMARY KEY CLUSTERED (CA_ID)
)

-- **** RELACIONAMENTOS ****
ALTER TABLE TB_PEDIDO
ADD PE_CLIENTE smallint not null

ALTER TABLE TB_PEDIDO
ADD CONSTRAINT FK_PEDIDO_CLIENTE FOREIGN KEY (PE_CLIENTE) REFERENCES TB_CLIENTE(CLI_ID)

ALTER TABLE TB_ITEM_PEDIDO
ADD IT_PEDIDO smallint not null

ALTER TABLE TB_ITEM_PEDIDO
ADD CONSTRAINT FK_TB_ITEM_PEDIDO_TB_PEDIDO FOREIGN KEY (IT_PEDIDO) REFERENCES TB_PEDIDO(PE_ID)

ALTER TABLE TB_PRODUTO
ADD PR_LOJA smallint not null

ALTER TABLE TB_PRODUTO
ADD CONSTRAINT FK_TB_PRODUTO_TB_LOJA FOREIGN KEY (PR_LOJA) REFERENCES TB_LOJA(LO_ID)

ALTER TABLE TB_PEDIDO
ADD TB_LOJA smallint not null

ALTER TABLE TB_PEDIDO
ADD CONSTRAINT FK_TB_PEDIDO_TB_LOJA FOREIGN KEY (PE_LOJA) REFERENCES TB_LOJA(LO_ID)

ALTER TABLE TB_ITEM_PEDIDO
ADD IT_PRODUTO SMALLINT NOT NULL

ALTER TABLE TB_ITEM_PEDIDO
ADD CONSTRAINT FK_TB_ITEM_PEDIDO_TB_PRODUTO FOREIGN KEY (IT_PRODUTO) REFERENCES TB_PRODUTO(PR_ID)

ALTER TABLE TB_CLIENTE
ADD CLI_USUARIO INT NOT NULL

ALTER TABLE TB_CLIENTE
ADD CONSTRAINT FK_TB_CLIENTE_TB_USUARIO FOREIGN KEY (CLI_USUARIO) REFERENCES TB_USUARIO(US_ID)

CREATE TABLE TB_PRODUTO_CATEGORIA(
	PC_ID SMALLINT NOT NULL,
	PC_PRODUTO SMALLINT NOT NULL,
	PC_CATEGORIA SMALLINT NOT NULL

	CONSTRAINT PK_PRODUTO_CATEGORIA PRIMARY KEY (PC_ID),
	CONSTRAINT FK_TB_PRODUTO_TB_CATEGORIA FOREIGN KEY (PC_PRODUTO) REFERENCES TB_PRODUTO(PR_ID), 
	CONSTRAINT FK_TB_PRODUTO_CATEGORIA2 FOREIGN KEY (PC_CATEGORIA) REFERENCES TB_CATEGORIA(CA_ID) 
)


-- **** INDICES ****
CREATE NONCLUSTERED INDEX IX_CLIENTE_RG ON TB_CLIENTE(CLI_RG)
CREATE NONCLUSTERED INDEX IX_PRODUTO_NOME ON TB_PRODUTO(PR_NOME)
CREATE NONCLUSTERED INDEX IX_LOJA_NOME ON TB_LOJA(LO_NOME)
CREATE NONCLUSTERED INDEX IX_PEDIDO_CLIENTE ON TB_PEDIDO(PE_CLIENTE)


-- **** STORED PROCEDURES ****
CREATE PROCEDURE sp_remover_pedidos
AS
BEGIN
	DECLARE @data DATE

	SELECT @data = DATEADD(day, DATEDIFF(day, 0, GETDATE()), 0)

	BEGIN TRANSACTION

	DELETE FROM TB_PEDIDO
	WHERE PE_STATUS_PEDIDO = 'Não confirmado' AND PE_DATA != @data

	COMMIT
END


-- **** FUNÇÕES ****
CREATE FUNCTION fc_faturamento_mes(@mes AS DATE) 
RETURNS SMALLMONEY
AS
BEGIN
	DECLARE @faturamento SMALLMONEY
	SELECT @faturamento = SUM(PE_PRECO_TOTAL) FROM TB_PEDIDO
	WHERE PE_DATA = @mes
	RETURN @faturamento
END

CREATE FUNCTION fc_quantidade_pedidos_mes(@mes AS DATE) 
RETURNS INT
AS 
BEGIN
	DECLARE @quantidade int
	SELECT @quantidade = COUNT(PE_ID) FROM TB_PEDIDO
	WHERE PE_DATA = @mes
	RETURN @quantidade
END

CREATE FUNCTION fc_validar_email(@email AS VARCHAR(50)) 
RETURNS BIT
AS BEGIN
	DECLARE @resultado BIT

	SELECT @resultado = 1
	WHERE @email LIKE '%_@_%_._%'
	AND @email NOT LIKE '%_@@_%_._%'
	AND @email NOT LIKE '%..%'
	AND @email NOT LIKE '%[^a-z,0-9,@,.,_]%'

	RETURN @resultado
END

select * FROM TB_USUARIO
WHERE dbo.fc_validar_email('gabriela.evangelista1996@hotmail.com') = 1

CREATE FUNCTION fc_validar_cep(@cep AS CHAR(8))
RETURNS BIT
AS BEGIN

	DECLARE @tamanhoCep INT

	SET @tamanhoCep = lEN(@cep)

	IF (@tamanhoCep < 8 OR @cep LIKE '%[a-z,-]%')
		RETURN 0

	RETURN 1
END

SELECT * FROM TB_CLIENTE
WHERE dbo.fc_validar_cep('12345678') = 1

DROP FUNCTION fc_validar_cep


-- **** VIEWS ****
CREATE VIEW vw_produtos_lojas
AS SELECT TB_PRODUTO.PR_NOME AS PRODUTO, 
TB_PRODUTO.PR_DESCRICAO AS [DESCRICAO DO PRODUTO],
TB_LOJA.LO_NOME AS LOJA, 
TB_PRODUTO.PR_VALOR AS [VALOR DO PRODUTO]
FROM TB_PRODUTO
INNER JOIN TB_LOJA
ON TB_PRODUTO.PR_LOJA = TB_LOJA.LO_ID

CREATE VIEW vw_pedidos_clientes_loja
AS SELECT TB_PEDIDO.PE_ID AS PEDIDO, 
TB_CLIENTE.CLI_NOME AS CLIENTE, 
TB_LOJA.LO_NOME AS LOJA
FROM TB_PEDIDO
INNER JOIN TB_CLIENTE
ON TB_PEDIDO.PE_CLIENTE = TB_CLIENTE.CLI_ID
INNER JOIN TB_LOJA
ON TB_PEDIDO.PE_LOJA = TB_LOJA.LO_ID